{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#magic-reports","title":"Magic-Reports \ud83e\ude84","text":"<p>Magic-Reports is a Domain Specific Language (DSL) designed to simplify the creation of HTML reports with rich visualizations and structured content. The DSL allows users to define data, plots, and other report elements in a simple and modular way.</p> <p> Getting Started  Installation  Source</p> <p> Simplified Syntax: Intuitive constructs for HTML elements to reduce verbosity. Data Binding: Easily incorporate dynamic data into your reports. Conditional Rendering: Streamlined syntax for conditional content. Loops: Simplified iteration for repetitive elements. Integrated Visualizations: Out of the Box support for datatables, bootstrap and plotly. No JavaScript Required: Create powerful reports without the need for JavaScript knowledge. Components: Define reusable components to enhance code organization. Custom Styling: Apply custom styles to elements easily for a personalized look.</p>"},{"location":"#support-us","title":"Support us","text":"<p>We love stars as much as we love rockets! So make sure you star us on GitHub.</p> <p>Star</p>"},{"location":"#about","title":"About","text":"<p>magic-reports has been created by Lukas Forer and is MIT Licensed.</p> <p></p>"},{"location":"about/","title":"About","text":"<p>magic-reports has been created by Lukas Forer and is MIT Licensed.</p> <p></p>"},{"location":"about/#contributors","title":"Contributors","text":"<p>-</p>"},{"location":"examples/","title":"Examples","text":"<p>Explore these examples to understand the syntax, structure, and features of Magic-Reports, and adapt them to your specific needs. Each example includes not only the report script but also the generated HTML report for reference.</p>"},{"location":"examples/#iris-dataset-report","title":"Iris Dataset Report","text":"<p>The Iris Dataset Report serves as an illustrative example showcasing the capabilities of Magic-Reports. This report utilizes the Magic-Reports DSL to present insights into the well-known Iris dataset. It features Bootstrap components, including headers, cards, tables, and visualizations generated using Plotly. The report provides an engaging exploration of the dataset, offering descriptive statistics, scatter plots, and distribution analyses.</p> <p>To generate the Iris Dataset Report, run the following command:</p> <pre><code>magic-reports -i examples/iris.report -o iris.html\n</code></pre> <p> View Report  View Source</p>"},{"location":"examples/#whisky-dataset-report","title":"Whisky Dataset Report","text":"<p>The Whisky Dataset Report demonstrates how Magic-Reports can be applied to analyze and visualize data from a Whisky dataset. Leveraging Bootstrap components and Plotly visualizations, the report presents a detailed examination of whisky ratings, prices, and relationships between variables. This example showcases the versatility of Magic-Reports in crafting informative and visually appealing reports for diverse datasets.</p> <p>Generate the Whisky Dataset Report using the following command:</p> <pre><code>magic-reports -i examples/whisky.report -o whisky.html\n</code></pre> <p> View Report  View Source</p>"},{"location":"examples/#multi-page-reports","title":"Multi Page Reports","text":"<p>You can create a single Groovy file containing multiple reports by setting the output within each <code>report</code> block. Here's an example:</p> <pre><code>// Report 1  \nreport {  \n    template \"bootstrap\"  \n    output \"${params.output}/pages/report1.html\"  \n\n    header \"\"  \n    footer \"\"  \n\n    content {  \n        h2 \"Content of Report 1\"  \n        p \"This is the content of Report 1.\"  \n    }  \n}  \n\n// Report 2  \nreport {  \n    template \"bootstrap\"  \n    output \"${params.output}/pages/report2.html\"  \n\n    header \"\"  \n    footer \"\"  \n\n    content {  \n        h2 \"Content of Report 2\"  \n        p \"This is the content of Report 2.\"  \n    }  \n}  \n\n// Index Page  \nreport {  \n    template \"bootstrap\"  \n    output \"${params.output}/index.html\"  \n\n    header \"\"  \n    footer \"\"  \n\n    content {  \n        div(class: \"container-fluid\") {  \n            div(class: \"row\") {  \n                // Sidebar  \n                div(class: \"col-md-3\") {  \n                    h3 \"Navigation\"  \n                    ul {  \n                        li {  \n                            a(href: \"pages/report1.html\", target: \"iframeContent\", \"Report 1\")  \n                        }  \n                        li {  \n                            a(href: \"pages/report2.html\", target: \"iframeContent\", \"Report 2\")  \n                        }  \n                    }  \n                }  \n                // Iframe  \n                div(class: \"col-md-9\") {  \n                    iframe(name: \"iframeContent\", id: \"iframeContent\",  \n                        width: \"100%\", height: \"500px\", src: \"pages/report1.html\")  \n                }  \n            }  \n        }  \n    }  \n}\n</code></pre> <p>In this example:</p> <ul> <li>Three reports are defined in the same file: \"Report 1,\" \"Report 2,\" and the \"Index Page\".</li> <li>The <code>output</code> keyword within each <code>report</code> block specifies the output file for that particular report.</li> <li>When you run the command:</li> </ul> <pre><code>magic-reports -i multi_reports.groovy --output results\n</code></pre> <p>It will generate three HTML files: \"results/pages/report1.html,\" \"results/pages/report2.html,\" and \"results/index.html,\" each containing the respective content.</p> <p>After generating the reports, opening <code>results/index.html</code> in a web browser should display the index page with the sidebar, and the iframe should load the content of the selected report when clicking the links.</p>"},{"location":"installation/","title":"Installation","text":"<p>TODO</p>"},{"location":"components/","title":"Components","text":""},{"location":"components/#bootstrap","title":"Bootstrap","text":""},{"location":"components/#charts-with-plotly","title":"Charts with Plotly","text":""},{"location":"components/#interactive-tables-with-datatables","title":"Interactive Tables with DataTables","text":""},{"location":"components/bootstrap/","title":"Bootstrap","text":"<p>Magic-Reports leverages the power of Bootstrap components to enhance the visual appeal and responsiveness of your reports. Bootstrap is a popular front-end framework that provides a comprehensive set of CSS and JavaScript tools for building modern and responsive web pages. In Magic-Reports, you can seamlessly integrate Bootstrap components into your reports using a Groovy-based DSL. These components include headers, tables, cards, tabs, and footers, allowing you to structure and present your data in a clean and organized manner. Whether you're creating a simple dataset overview or a complex interactive dashboard, Bootstrap components in Magic-Reports provide a consistent and professional look while ensuring a user-friendly experience for your audience. This introduction sets the stage for utilizing Bootstrap components to craft compelling and visually engaging reports within the Magic-Reports framework.</p> <p>Attention</p> <p>In order to leverage the Bootstrap components seamlessly within your Magic-Reports, ensure that you are utilizing either the <code>bootstrap</code> template or that the template being used includes the necessary Bootstrap CSS and JavaScript scripts.</p>"},{"location":"components/bootstrap/#header","title":"Header","text":""},{"location":"components/bootstrap/#description","title":"Description","text":"<p>The Bootstrap Header component creates a header with a title, description, and optional background color.</p>"},{"location":"components/bootstrap/#include-command","title":"Include Command","text":"<pre><code>include \"components/bootstrap_header.report\"\n</code></pre>"},{"location":"components/bootstrap/#options","title":"Options","text":"Option Description Example Value title Title of the header \"Iris Dataset\" description Description text \"Description...\" color Background color (hex) \"#546d78\""},{"location":"components/bootstrap/#example","title":"Example","text":"<pre><code>bootstrap_header (\n    title: \"Iris Dataset\",\n    description: \"Description of the dataset...\",\n    color: \"#546d78\"\n)\n</code></pre>"},{"location":"components/bootstrap/#card","title":"Card","text":""},{"location":"components/bootstrap/#description_1","title":"Description","text":"<p>The Bootstrap Card component creates a card with a title and content.</p>"},{"location":"components/bootstrap/#include-command_1","title":"Include Command","text":"<pre><code>include \"components/bootstrap_card.report\"\n</code></pre>"},{"location":"components/bootstrap/#options_1","title":"Options","text":"Option Description Example Value title Title of the card \"Dataset\""},{"location":"components/bootstrap/#example_1","title":"Example","text":"<pre><code>bootstrap_card (\n    title: \"Dataset\"\n) {\n    // Card content goes here\n}\n</code></pre> <p>I appreciate your observation. Apologies for the oversight. Below is the missing documentation for the <code>bootstrap_tabs</code> component:</p>"},{"location":"components/bootstrap/#tabs","title":"Tabs","text":""},{"location":"components/bootstrap/#description_2","title":"Description","text":"<p>The Bootstrap Tabs component organizes content into tabbed sections, allowing users to switch between different views.</p>"},{"location":"components/bootstrap/#include-command_2","title":"Include Command","text":"<pre><code>include \"components/bootstrap_tabs.report\"\n</code></pre>"},{"location":"components/bootstrap/#options_2","title":"Options","text":"<p>The <code>bootstrap_tabs</code> component accepts nested <code>bootstrap_tab</code> components.</p>"},{"location":"components/bootstrap/#example_2","title":"Example","text":"<pre><code>bootstrap_tabs {\n    bootstrap_tab(title: \"Tab 1\") {\n        // Content for Tab 1\n    }\n\n    bootstrap_tab(title: \"Tab 2\") {\n        // Content for Tab 2\n    }\n}\n</code></pre> <p>The <code>bootstrap_tabs</code> component allows you to organize content into tabs, providing a clean and organized structure for presenting information.</p>"},{"location":"components/bootstrap/#table","title":"Table","text":""},{"location":"components/bootstrap/#description_3","title":"Description","text":"<p>The Bootstrap Table component displays a DataTable with the specified data.</p>"},{"location":"components/bootstrap/#include-command_3","title":"Include Command","text":"<pre><code>include \"components/bootstrap_table.report\"\n</code></pre>"},{"location":"components/bootstrap/#options_3","title":"Options","text":"Option Description Example Value data Table data (Tech Tablesaw Table object) iris"},{"location":"components/bootstrap/#example_3","title":"Example","text":"<pre><code>bootstrap_table (\n    data: iris\n) {\n    // Additional options and content for the table\n}\n</code></pre>"},{"location":"components/bootstrap/#footer","title":"Footer","text":""},{"location":"components/bootstrap/#description_4","title":"Description","text":"<p>The Bootstrap Footer component adds a footer with optional text and background color.</p>"},{"location":"components/bootstrap/#include-command_4","title":"Include Command","text":"<pre><code>include \"components/bootstrap_footer.report\"\n</code></pre>"},{"location":"components/bootstrap/#options_4","title":"Options","text":"Option Description Example Value text Footer text \"This report was created by John Doe on 2022-01-01\" color Background color (hex or primary) \"#546d78\""},{"location":"components/bootstrap/#example_4","title":"Example","text":"<pre><code>bootstrap_footer (\n    text: \"This report was created by John Doe on 2022-01-01\",\n    color: \"#546d78\"\n)\n</code></pre>"},{"location":"components/datatable/","title":"DataTable","text":"<p>The DataTable component generates an interactive and customizable table that displays data in rows and columns. It utilizes the DataTables library to enhance the user experience by adding features like sorting, searching, and pagination. The DataTable component is useful for displaying structured data with interactive features, providing a user-friendly way to explore and analyze tabular information within the Magic-Report.</p>"},{"location":"components/datatable/#include-command","title":"Include Command","text":"<pre><code>include \"components/datatable.report\"\n</code></pre>"},{"location":"components/datatable/#options","title":"Options","text":"<p>The <code>datatable</code> component accepts the following options:</p> Option Description Example Value data Table data (Tech Tablesaw Table object) iris bLengthChange Enable or disable the option to change the page length false bFilter Enable or disable the search/filter input box false Additional Options Additional options supported by DataTables library DataTable Options"},{"location":"components/datatable/#example","title":"Example","text":"<pre><code>datatable (\n    data: iris,\n    bLengthChange: false,\n    bFilter: false\n)\n</code></pre> <p>This example creates a DataTable for the <code>iris</code> dataset with options to disable page length change and the search/filter input box.</p>"},{"location":"components/datatable/#notes","title":"Notes","text":"<ul> <li>The <code>data</code> option should be a Tech Tablesaw Table object or a list of objects.</li> <li>Additional customization options can be included based on the DataTables library documentation.</li> </ul>"},{"location":"components/plotly/","title":"Plotly","text":""},{"location":"components/plotly/#plotly-component","title":"Plotly Component","text":""},{"location":"components/plotly/#description","title":"Description","text":"<p>The <code>plotly</code> component in Magic-Report integrates the Plotly library to create interactive and visually appealing visualizations within your reports. Plotly is a versatile JavaScript charting library that supports a wide range of chart types.</p>"},{"location":"components/plotly/#include-command","title":"Include Command","text":"<pre><code>include \"components/plotly.report\"\n</code></pre>"},{"location":"components/plotly/#options","title":"Options","text":"<p>The <code>plotly</code> component is designed to support various Plotly chart types, each requiring specific options. Below are examples of different Plotly chart types:</p>"},{"location":"components/plotly/#1-histogram","title":"1. Histogram","text":"<pre><code>plotly {\n    histogram (\n        x: filteredData.column(\"sepallength\").asList(),\n        marker: [\n            color: \"#aaaaaa\"\n        ]\n    )\n}\n</code></pre>"},{"location":"components/plotly/#2-box-plot","title":"2. Box Plot","text":"<pre><code>plotly {\n    box (\n        y: iris.column(\"sepallength\").asList(),\n        x: iris.column(\"class\").asList()\n    )\n}\n</code></pre>"},{"location":"components/plotly/#3-scatter-plot","title":"3. Scatter Plot","text":"<pre><code>plotly {\n    scatter(\n        x: whisky.column(\"Rating\").asList(),\n        y: whisky.column(\"Price\").asList(),\n        text: whisky.column(\"Name\").asList()\n    )\n}\n</code></pre>"},{"location":"components/plotly/#common-options","title":"Common Options","text":"<p>Each chart type may have specific options, but some common options include:</p> <ul> <li><code>x</code>: Data for the x-axis.</li> <li><code>y</code>: Data for the y-axis.</li> <li><code>text</code>: Text to display when hovering over data points.</li> <li>Additional options specific to each chart type (e.g., <code>marker</code> for color customization).</li> </ul>"},{"location":"components/plotly/#example-usage","title":"Example Usage","text":"<p>The <code>plotly</code> component allows you to create various visualizations, including histograms, box plots, scatter plots, and more. Customize the options based on your dataset and the type of chart you want to generate.</p>"},{"location":"components/plotly/#notes","title":"Notes","text":"<ul> <li>Refer to the Plotly documentation for detailed options and customization possibilities for each chart type.</li> <li>Ensure that the required data columns are specified appropriately for the chosen chart type.</li> </ul> <p>The <code>plotly</code> component empowers you to integrate sophisticated interactive visualizations seamlessly into your Magic-Reports, enhancing data exploration and analysis capabilities.</p> <p>Certainly! Let's enhance the documentation to include a generic <code>trace</code> function within the <code>plotly</code> component. This <code>trace</code> function allows you to create a variety of Plotly traces by specifying the chart type and additional options.</p> <pre><code>## Plotly Component\n\n### Description\nThe `plotly` component in Magic-Report integrates the Plotly library to create interactive and visually appealing visualizations within your reports. Plotly is a versatile JavaScript charting library that supports a wide range of chart types.\n\n### Include Command\n```groovy\ninclude \"components/plotly.report\"\n</code></pre>"},{"location":"components/plotly/#options_1","title":"Options","text":"<p>The <code>plotly</code> component includes a generic <code>trace</code> function that supports various Plotly chart types. Examples of different trace usages are provided below:</p>"},{"location":"components/plotly/#trace-function","title":"Trace Function","text":"<pre><code>plotly {\n    trace(\n        type: \"scatter\", // Specify the chart type\n        x: whisky.column(\"Rating\").asList(),\n        y: whisky.column(\"Price\").asList(),\n        text: whisky.column(\"Name\").asList(),\n        mode: \"markers\",\n        marker: [\n            size: 10,\n            color: \"rgba(255, 0, 0, 0.7)\"\n        ]\n    )\n}\n</code></pre>"},{"location":"components/plotly/#common-options_1","title":"Common Options","text":"<ul> <li><code>type</code>: Specifies the chart type (e.g., \"scatter\", \"bar\", \"histogram\").</li> <li><code>x</code>: Data for the x-axis.</li> <li><code>y</code>: Data for the y-axis.</li> <li><code>text</code>: Text to display when hovering over data points.</li> <li>Additional options supported by the chosen chart type.</li> </ul>"},{"location":"components/plotly/#example-usage_1","title":"Example Usage","text":"<p>The <code>trace</code> function allows you to create a variety of Plotly traces with flexibility in specifying the chart type and additional options. Customize the options based on your dataset and the type of trace you want to generate.</p>"},{"location":"components/plotly/#notes_1","title":"Notes","text":"<ul> <li>Refer to the Plotly documentation for detailed options and customization possibilities for each chart type.</li> <li>The <code>trace</code> function provides a generic approach to creating traces, offering flexibility and extensibility.</li> </ul> <p>The <code>plotly</code> component, with the addition of the <code>trace</code> function, empowers you to integrate sophisticated interactive visualizations seamlessly into your Magic-Reports, enhancing data exploration and analysis capabilities.</p>"},{"location":"docs/creating-components/","title":"Creating Components","text":"<p>In Magic-Reports, the <code>component</code> keyword serves as a powerful tool for creating reusable and customizable components. Components are essentially functions that encapsulate HTML structure and logic, allowing you to abstract away complex code into modular and easily maintainable units. Let's delve into the creation of components using the <code>component</code> keyword and explore how options can be utilized:</p>"},{"location":"docs/creating-components/#creating-a-component","title":"Creating a Component","text":"<p>To define a component, use the <code>component</code> keyword followed by the component's name and a closure containing the HTML structure. Here's a simple example:</p> <pre><code>component \"my_custom_component\" {\n    // HTML structure for the component\n    div(class: \"custom-component\") {\n        h3 \"This is my custom component!\"\n    }\n}\n</code></pre>"},{"location":"docs/creating-components/#using-options","title":"Using Options","text":"<p>Components often include customizable options to enhance their flexibility. Options are defined within the component's closure, allowing users to tailor the component based on specific needs. For instance:</p> <pre><code>component \"customizable_component\" {\n    // HTML structure with customizable options\n    div(class: \"customizable-component\") {\n        h3 option.title\n        p options.content\n    }\n}\n</code></pre> <p>In this example, the <code>customizable_component</code> includes two options, <code>title</code> and <code>content</code>, which are then used in the HTML structure.</p>"},{"location":"docs/creating-components/#using-body","title":"Using Body","text":"<p>TODO</p>"},{"location":"docs/creating-components/#utilizing-components-in-reports","title":"Utilizing Components in Reports","text":"<p>Once defined, components can be easily incorporated into your reports using the component's name. Here's how you can use the previously created components in a report:</p> <pre><code>report {\n    title \"Report with Components\"\n\n    content {\n        // Using the first component\n        my_custom_component\n\n        // Using the second component with custom options\n        customizable_component(title: \"Custom Title\", content: \"Custom Content\")\n    }\n}\n</code></pre> <p>By integrating the <code>component</code> keyword and options, Magic-Reports facilitates the creation of modular, reusable, and customizable components, contributing to cleaner and more maintainable report structures.</p>"},{"location":"docs/creating-templates/","title":"Templates","text":"<p>Magic-Reports supports HTML templates that contain variables enclosed in <code>{{double curly braces}}</code>. When using the <code>template</code> function, the first-level tags in the HTML template are automatically populated with corresponding values from the report. This mechanism enables dynamic content injection and enhances the flexibility of report styling.</p> <p>Assume you have a template named \"template.html\" structured as follows:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;{{title}}&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"container\"&gt;\n        &lt;h1&gt;{{title}}&lt;/h1&gt;\n        &lt;div class=\"content\"&gt;\n            {{content}}\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>In your report script, you can use this template and pass the <code>title</code> and <code>content</code> variables:</p> <pre><code>report {\n    template \"$baseDir/template.html\"\n\n    title \"Custom Template Example\"\n\n    content {\n        p \"This report uses a custom template for styling.\"\n    }\n}\n</code></pre> <p>Magic-Reports automatically injects the <code>title</code> and <code>content</code> variables into the corresponding <code>{{variables}}</code> in the template. This allows for dynamic content rendering while maintaining the structure defined in the template.</p> <p>The resulting HTML output would look like:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Custom Template Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"container\"&gt;\n        &lt;h1&gt;Custom Template Example&lt;/h1&gt;\n        &lt;div class=\"content\"&gt;\n            &lt;p&gt;This report uses a custom template for styling.&lt;/p&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>This demonstrates how Magic-Reports seamlessly integrates with HTML templates, allowing for dynamic and structured report generation.</p>"},{"location":"docs/creating-templates/#example-with-different-variable-names","title":"Example with Different Variable Names:","text":"<p>Assume you have a template named \"custom_template.html\" structured as follows:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;{{pageTitle}}&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"wrapper\"&gt;\n        &lt;header&gt;\n            &lt;h1&gt;{{headerTitle}}&lt;/h1&gt;\n        &lt;/header&gt;\n        &lt;main&gt;\n            {{mainContent}}\n        &lt;/main&gt;\n        &lt;footer&gt;\n            &lt;p&gt;{{footerText}}&lt;/p&gt;\n        &lt;/footer&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>In your report script, you can use this template with different variable names:</p> <pre><code>template \"$baseDir/templates/custom_template.html\"\n\nreport {\n    pageTitle \"Dynamic Template Example\"\n    headerTitle \"Magic-Reports\"\n    mainContent {\n        p \"This report demonstrates dynamic content injection.\"\n    }\n    footerText \"Generated by Magic-Reports\"\n}\n</code></pre> <p>Magic-Reports identifies the variables in the template (<code>pageTitle</code>, <code>headerTitle</code>, <code>mainContent</code>, and <code>footerText</code>) and populates them with the corresponding values from the report. The resulting HTML output adapts the structure defined in the template and injects the provided content.</p>"},{"location":"docs/getting-started/","title":"Getting Started","text":"<p>Magic-Reports is a powerful and flexible reporting tool that allows you to create interactive and visually appealing reports using a Groovy-based DSL. Follow this guide to get started with Magic-Reports:</p>"},{"location":"docs/getting-started/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following prerequisites installed:</p> <ul> <li>Java Development Kit (JDK) 11 or later: Download JDK</li> </ul>"},{"location":"docs/getting-started/#install-magic-reports","title":"Install Magic-Reports","text":"<p>TODO: install</p>"},{"location":"docs/getting-started/#create-your-first-report","title":"Create Your First Report","text":"<p>Create a new Groovy script (e.g., <code>MyReport.report</code>) and import the Magic-Reports DSL:</p> <pre><code>// Define the structure of your report\nreport {\n    title \"My First Magic-Report\"\n\n    content {\n        h2(\"Hello, Magic-Reports!\")\n\n        p(\"This is a simple Magic-Report. You can add content, charts, and more.\")\n    }\n}\n</code></pre>"},{"location":"docs/getting-started/#build-your-report","title":"Build Your Report","text":"<p>Save the script and run it using the magic-reports interpreter:</p> <pre><code>magic-reportrs -i MyReport.report -o MyReport.html\n</code></pre> <p>This will generate an HTML report:</p> <p>TODO: image</p>"},{"location":"docs/getting-started/#explore-features","title":"Explore Features","text":"<p>Congratulations! You've successfully created your first Magic-Report. Explore the documentation and examples to unlock the full potential of Magic-Reports for your reporting needs.</p> <p>Explore the Magic-Reports documentation to discover more features and components you can use to enhance your reports. You can include tables, charts, Bootstrap components, and more.</p> <p>For more detailed information and examples, refer to the Magic-Reports GitHub repository and the official documentation.</p>"},{"location":"docs/html-builder/","title":"Content Builder","text":"<p>Magic-Reports leverages Groovy's HTML builder, which allows you to create HTML tags and attributes in a concise and readable manner. Here's how it works:</p> <p>The <code>report</code> keyword is used within a Groovy script and takes a closure as an argument. This closure encapsulates the entire report structure. Here is a basic example:</p> <pre><code>report {\n    title \"My Magic-Report\"\n\n    content {\n        p \"This is a paragraph in my report.\"\n    }\n}\n</code></pre> <p>In this example, the <code>report</code> keyword defines a report with the title \"My Magic-Report\" and includes a paragraph in the content section.</p>"},{"location":"docs/html-builder/#creating-html-tags","title":"Creating HTML Tags","text":"<p>HTML tags are created by invoking methods with the tag name. For example, to create a paragraph (<code>&lt;p&gt;</code>) tag, you can simply use:</p> <pre><code>p \"This is a paragraph.\"\n</code></pre>"},{"location":"docs/html-builder/#nesting-tags","title":"Nesting Tags","text":"<p>Tags can be nested within each other to create the desired HTML structure. For example:</p> <pre><code>div {\n    h1 \"Heading 1\"\n    p \"This is a paragraph inside a div.\"\n}\n</code></pre> <p>This creates a <code>&lt;div&gt;</code> tag containing an <code>&lt;h1&gt;</code> tag and a <code>&lt;p&gt;</code> tag.</p>"},{"location":"docs/html-builder/#adding-attributes","title":"Adding Attributes","text":"<p>HTML attributes can be added by providing named arguments to the tag methods. For example:</p> <pre><code>img(src: \"image.jpg\", alt: \"An image\")\n</code></pre> <p>This creates an <code>&lt;img&gt;</code> tag with the <code>src</code> and <code>alt</code> attributes.</p> <p>Here's an example that includes the <code>class</code> attribute in a <code>div</code> tag:</p> <pre><code>div(class: \"my-div\") {\n    p \"This div has a custom class.\"\n}\n</code></pre> <p>This creates a <code>&lt;div&gt;</code> with the attribute <code>class=\"my-div\"</code>.</p>"},{"location":"docs/html-builder/#dynamic-content","title":"Dynamic Content","text":"<p>Magic-Reports allows you to include dynamic content within HTML tags using Groovy's string interpolation. For example:</p> <pre><code>def dynamicText = \"Hello, Magic-Reports!\"\np \"Dynamic content: ${dynamicText}\"\n</code></pre> <p>This dynamically inserts the content of the <code>dynamicText</code> variable into the paragraph.</p> <p>Understanding the <code>report</code> keyword and the HTML builder enables you to create flexible and dynamic reports using Magic-Reports. Leverage Groovy's concise syntax and powerful DSL features to craft compelling HTML content with ease.</p>"},{"location":"docs/html-builder/#loops","title":"Loops","text":"<p>You can use Groovy's standard loop constructs within the HTML builder to dynamically generate content. Here's an example using a <code>for</code> loop to create an unordered list:</p> <pre><code>ul {\n    for (i in 1..3) {\n        li \"Item ${i}\"\n    }\n}\n</code></pre> <p>This generates an unordered list (<code>&lt;ul&gt;</code>) with three list items (<code>&lt;li&gt;</code>).</p>"},{"location":"docs/html-builder/#conditions","title":"Conditions","text":"<p>Conditional statements can be used to include or exclude content based on specific conditions. For example:</p> <pre><code>def condition = true\n\ndiv {\n    if (condition) {\n        p \"This paragraph is included based on the condition.\"\n    } else {\n        p \"This paragraph is excluded.\"\n    }\n}\n</code></pre> <p>This creates a <code>&lt;div&gt;</code> with a paragraph inside, depending on the value of the <code>condition</code> variable.</p>"},{"location":"docs/html-builder/#components","title":"Components","text":"<p>Magic-Reports introduces components that seamlessly integrate into the HTML builder, behaving like regular HTML tags. These components offer a higher level of abstraction, encapsulating complex structures and functionalities with a simplified syntax.</p> <p>In this example, <code>bootstrap_card</code> is a Magic-Reports component that generates the necessary HTML code for a Bootstrap card. This approach allows you to leverage the power of components while maintaining the familiar tag-based structure in your reports.</p> <p>The <code>include</code> command in Magic-Reports allows you to import external components or templates into your report. The syntax is straightforward:</p> <pre><code>include \"components/bootstrap_card.report\"\n\nreport {\n    title \"Report with Bootstrap Card\"\n    content {\n        // Using a Bootstrap card component\n        bootstrap_card(title: \"Example Card\") {\n            p \"Content of the card\"\n            // Additional content or nested components can be added here\n        }\n    }\n}\n</code></pre> <p>In this example, <code>bootstrap_card</code> is a Magic-Reports component that generates the necessary HTML code for a Bootstrap card. This approach allows you to leverage the power of components while maintaining the familiar tag-based structure in your reports.</p>"},{"location":"docs/html-builder/#example-combining-loops-conditions-and-attributes","title":"Example Combining Loops, Conditions, and Attributes","text":"<p>Now, let's combine these concepts in a more complex example:</p> <pre><code>div(class: \"container\") {\n    h2 \"Dynamic Content Example\"\n\n    ul {\n        for (i in 1..5) {\n            if (i % 2 == 0) {\n                li(class: \"even\") \"Item ${i}\"\n            } else {\n                li(class: \"odd\") \"Item ${i}\"\n            }\n        }\n    }\n\n    if (condition) {\n        p \"This content is included based on the condition.\"\n    } else {\n        p \"This content is excluded.\"\n    }\n}\n</code></pre> <p>In this example, a <code>&lt;div&gt;</code> with a class of \"container\" contains an <code>&lt;h2&gt;</code> tag, a dynamically generated <code>&lt;ul&gt;</code> with alternating classes for even and odd list items, and a conditional paragraph based on the value of <code>condition</code>.</p>"},{"location":"docs/parameters/","title":"Parameters","text":"<p>To pass a file name for a dataset via the command-line interface (CLI) and make it accessible in the report script, you can leverage the <code>params</code> map in Magic-Reports. Here's an example:</p> <p>Assume your report script (<code>dataset.report</code>) looks like this:</p> <pre><code>report {\n    title \"Dataset Report\"\n\n    content {\n        h2 \"Dataset Analysis\"\n\n        // Access the file name from the CLI parameters\n        p \"Analyzing dataset from file: ${params.file}\"\n\n        // You can continue with the rest of your report content...\n    }\n}\n</code></pre> <p>Now, when you run the Magic-Reports command, you can pass the file name as a parameter:</p> <pre><code>magic-reports -i dataset.report -o output.html --file data/dataset.csv\n</code></pre> <p>In this example, <code>--file data/dataset.csv</code> is a CLI parameter specifying the file name, and it will be automatically loaded into the <code>params</code> map. The report script then accesses this file name using <code>params.file</code> and incorporates it into the report content.</p>"},{"location":"docs/report/","title":"Building Reports","text":"<p>The <code>report</code> keyword in Magic-Reports serves as the main entry point for defining the structure and content of your reports. It encapsulates the entire report and allows you to specify the title, layout, and various components. The HTML builder in Magic-Reports utilizes Groovy's DSL (Domain-Specific Language) capabilities to provide a concise and expressive way of constructing HTML content.</p>"},{"location":"docs/report/#structure-of-report-keyword","title":"Structure of <code>report</code> Keyword","text":"<p>The <code>report</code> keyword is used within a Groovy script and takes a closure as an argument. This closure encapsulates the entire report structure. Here is a basic example:</p> <pre><code>report {\n    title \"My Magic-Report\"\n\n    content {\n        p \"This is a paragraph in my report.\"\n    }\n}\n</code></pre> <p>In this example, the <code>report</code> keyword defines a report with the title \"My Magic-Report\" and includes a paragraph in the content section.</p>"},{"location":"docs/report/#defining-a-layout-template","title":"Defining a Layout Template","text":"<p>To define a layout template, use the <code>template</code> function within your report:</p> <pre><code>template \"bootstrap\"\n</code></pre> <p>In this example, the template named \"bootstrap\" is specified. Magic-Reports supports various templates, and you can create or customize templates based on your needs.</p>"},{"location":"docs/report/#utilizing-basedir","title":"Utilizing <code>$baseDir</code>","text":"<p>TODO: use baseDir to load datasets</p> <p>To dynamically set the location of templates using <code>$baseDir</code>, you can structure your project like this:</p> <pre><code>project/\n|-- templates/\n|   |-- my-template.html\n|-- your_report.report\n</code></pre> <p>In your report script (<code>your_report.groovy</code>), use the <code>template</code> function with <code>$baseDir</code>:</p> <pre><code>template \"$baseDir/templates/my-template.html\"\n</code></pre> <p>This sets the template location based on the current directory structure.</p>"},{"location":"docs/report/#complete-example","title":"Complete Example","text":"<p>Putting it all together:</p> <pre><code>report {\n    title \"Custom Template Example\"\n    template \"$baseDir/templates/my-template.html\"\n\n    content {\n        p \"This report uses a custom template for styling.\"\n    }\n}\n</code></pre> <p>In this example, the report utilizes the \"bootstrap\" template located in the \"templates\" directory relative to the script's location.</p> <p>By combining the <code>template</code> function with the <code>$baseDir</code> variable, Magic-Reports provides a flexible way to define layout templates and adapt the template location based on your project structure.</p>"},{"location":"themes/","title":"Templates","text":""},{"location":"themes/#bootstrap","title":"Bootstrap","text":"<p>The Bootstrap templates it based on Bootstrap 5 based on the starter template.</p>"},{"location":"themes/#usage","title":"Usage","text":"<pre><code>report {\n    template \"bootstrap\"\n}\n</code></pre>"},{"location":"themes/#github-readme","title":"GitHub Readme","text":"<p>The GitHub Readme template utilizes the styling provided by the GitHub Markdown CSS library hosted on https://cdnjs.com/libraries/github-markdown-css.</p>"},{"location":"themes/#usage_1","title":"Usage","text":"<pre><code>report {\n    template \"github-readme\"\n}\n</code></pre>"}]}