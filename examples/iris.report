import tech.tablesaw.api.*
import tech.tablesaw.columns.*

def iris = Table.read().csv("$baseDir/iris.csv")

report {

	title "Iris"

    content {

        h2 "Dataset"
        datatable (
            data: iris.select("sepallength", "sepalwidth")
        )

        h2 "Relation between variables"
        p "We will see the relationship between the sepal length and sepal width and also between petal length and petal width."

        h3 "Comparing Sepal Length and Sepal Width"

        plotly {
            scatter (
                  x: iris.column("sepallength").asList(),
                  y: iris.column("sepalwidth").asList(),
                  text: iris.column("class").asList()
            )
        }

        plotly {
            for (table in iris.splitOn(iris.categoricalColumn("class"))){
                scatter (
                      x: table.column("sepallength").asList(),
                      y: table.column("sepalwidth").asList(),
                      text: table.column("class").asList(),
                      name: table.column("class").asList()[0]
                )
            }
        }

        card {
            title "Lukas"
            description "Hallo Freunde. Eine kleine description"
            body {
                plotly {
                    box (
                          y: iris.column("sepallength").asList(),
                          x: iris.column("class").asList()
                    )
                }
            }
        }

        h2 "Distribution"

        plotly {
            def classes = iris.splitOn(iris.categoricalColumn("class"))
            for (table in classes){
                histogram (
                    x: table.column("sepallength").asList(),
                    name: table.column("class").asList()[0],
                    opacity: 0.5
                )
            }
            layout (
                title: "Distribution of all classes",
                barmode: "overlay"
            )
        }

        for (className in iris.column("class").asSet()) {
           def filteredData = iris.where(iris.stringColumn("class").isEqualTo(className))

            h3 "${className}"
            plotly {
                histogram (
                      x: filteredData.column("sepallength").asList(),
                      marker: [
                        color: "#aaaaaa"
                     ]
                )
            }
        }

    }

}

